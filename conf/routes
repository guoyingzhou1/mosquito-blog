# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page

###############
# Application #
###############
GET           /                                     controllers.Application.index(page:Option[Int])

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                         controllers.Assets.versioned(path="/public", file: Asset)
GET           /resource/*file                       controllers.ResourceCtrl.at(path="/",file)

GET           /blog/to/login                        controllers.Application.toLogin
GET           /blog/to/register                     controllers.Application.toReg
GET           /blog/to/message                      controllers.Application.toMessage
GET           /blog/logout                          controllers.Application.logOut
GET           /blog/unfinished                      controllers.Application.unfinished
GET           /blog/user                            controllers.Application.user
GET           /blog/to/reset/password               controllers.Application.toResetPassword

GET           /blog/to/article/:aid                 controllers.Application.toArticle(aid:Long)
GET           /blog/to/add/article                  controllers.Application.toNewArticle
GET           /blog/smile/:aid                      controllers.Application.smile(aid:Long)
GET           /blog/to/user/article/:uid            controllers.Application.queryWithUid(uid:Long,page:Option[Int])
GET           /blog/catalog/:catalog                controllers.Application.toCatalogArticle(catalog:String)
GET           /blog/to/update/article/:aid          controllers.Application.toUpdateArticle(aid:Long)
GET           /blog/archives                        controllers.Application.archives
GET           /blog/delete/article/:aid             controllers.Application.deleteArticle(aid:Long)

GET           /blog/reply/article/smile/:rid        controllers.Application.smileReply2Article(rid:Long)
GET           /blog/reply/message/smile/:rid        controllers.Application.smileReply2Message(rid:Long)

POST          /blog/login                           controllers.Application.loginForm
POST          /blog/register                        controllers.Application.registerForm
POST          /blog/add/article                     controllers.Application.addArticleForm
POST          /blog/add/reply/article               controllers.Application.addReplyForm
POST          /blog/add/reply/meessage              controllers.Application.addMessageReplyForm
POST          /blog/reset/password                  controllers.Application.updatePasswordForm
POST          /blog/update/article                  controllers.Application.updateArticleForm
POST          /blog/admin                           controllers.Application.checkAdminForm

POST          /blog/check/resume                    controllers.Application.checkResumeForm
POST          /blog/user/connect                    controllers.Application.addConnUserForm
#about
GET           /blog/about                           controllers.Application.about
GET           /blog/contactus                       controllers.Application.contactus
GET           /blog/to/resume                       controllers.Application.toResume

#admin
GET           /blog/to/admin                        controllers.Application.toAdmin

#Delete Cache

GET           /blog/remove/cache/:action            controllers.Application.removeCache(action:String)

#=======================================================================================================================
#RESTful APIs

#############
# User APIs #
#############
#PUT           /blog/user                            controllers.UserCtrl.init
#GET           /blog/user/:action                    controllers.UserCtrl.query(action:String)
#GET           /blog/user/uid/:uid                   controllers.UserCtrl.retrieve(uid:Long)
#GET           /blog/user/name/:name                 controllers.UserCtrl.findByName(name:String)
#GET           /blog/user/email/:email               controllers.UserCtrl.findByEmail(email:String)
#GET           /blog/user/phone/:phone               controllers.UserCtrl.findByPhone(phone:String)
#PATCH         /blog/user/passwd                     controllers.UserCtrl.updatePassWord
#GET           /blog/user/isexists/:uname            controllers.UserCtrl.userIsExists(uname:String)
#GET           /blog/user/query/active               controllers.UserCtrl.queryActiveUser(page: Option[Int], size: Option[Int])
#PUT           /blog/user/connect                    controllers.UserCtrl.addConnUser

#UserInfo
#PUT           /blog/userinfo                        controllers.UserInfoCtrl.init

#UCustom
PUT           /blog/custom                          controllers.UcustomCtrl.init
GET           /blog/custom/:uid                     controllers.UcustomCtrl.retrieve(uid:Long)

################
##Article APIs #
################
#
#PUT           /article                               controllers.ArticleCtrl.init
#GET           /article                               controllers.ArticleCtrl.query(page: Option[Int], size: Option[Int])
#GET           /article/:aid                          controllers.ArticleCtrl.retrieve(aid:Long)
#PATCH         /article/read/:aid                     controllers.ArticleCtrl.readCount(aid:Long)
#PATCH         /article/smile/:aid                    controllers.ArticleCtrl.smileCount(aid:Long)
#PATCH         /article/reply/:aid                    controllers.ArticleCtrl.replyCount(aid:Long)
#DELETE        /article/:aid                          controllers.ArticleCtrl.delete(aid:Long)
#GET           /article/uid/:uid                      controllers.ArticleCtrl.queryWithUid(uid:Long,page:Option[Int], size: Option[Int])
#GET           /article/catalog/query                 controllers.ArticleCtrl.queryCatalog
#GET           /article/query/:action                 controllers.ArticleCtrl.queryArticleAction(action:String,page: Option[Int], size: Option[Int])
#GET           /article/query/catalog/:catalog        controllers.ArticleCtrl.queryWithCatalog(catalog:String,page: Option[Int], size: Option[Int])
#
#PATCH         /article                               controllers.ArticleCtrl.update
#
###############
## Reply APIs #
###############
#PUT           /reply/article                         controllers.Reply2ArticleCtrl.init
#GET           /replay/article/:rid                   controllers.Reply2ArticleCtrl.retrieve(rid:Long)
#GET           /reply/article/aid/:aid                controllers.Reply2ArticleCtrl.query(aid:Long)
#GET           /reply/article/rid/:rid                controllers.Reply2ArticleCtrl.queryChild(rid:Long)
#PATCH         /reply/article/smile/:rid              controllers.Reply2ArticleCtrl.smile(rid:Long)
#
#PUT           /reply/message                         controllers.Replay2MessageCtrl.init
#GET           /replay/message/:rid                   controllers.Replay2MessageCtrl.retrieve(rid:Long)
#GET           /reply/message/aid/:aid                controllers.Replay2MessageCtrl.query(aid:Long)
#GET           /reply/message/rid/:rid                controllers.Replay2MessageCtrl.queryChild(rid:Long)
#
##############
## News APIs #
##############
#
#PUT           /news/message                          controllers.News2MessageCtrl.init
#GET           /news/message                          controllers.News2MessageCtrl.query(page:Option[Int],size:Option[Int])
#
#PUT           /news/mood                             controllers.News2MoodCtrl.init
#GET           /news/mood                             controllers.News2MoodCtrl.query(page:Option[Int],size:Option[Int])
#GET           /news/mood/head                        controllers.News2MoodCtrl.findHead
#DELETE        /news/mood/:nid                        controllers.News2MoodCtrl.delete(nid:Long)

###########
# Tools   #
###########

#Link
GET           /link                                 controllers.LinkCtrl.query(page:Option[Int],size:Option[Int])
PUT           /link                                 controllers.LinkCtrl.init
DELETE        /link/:lid                            controllers.LinkCtrl.remove(lid:Long)
PATCH         /link                                 controllers.LinkCtrl.update

#upload
POST          /upload                               controllers.other.UploadCtrl.upload()

#download
#GET           /to/download                           controllers.UploadCtrl.toDownload
#GET           /download/:path                        controllers.UploadCtrl.download(path:String)

#mail
#PUT           /mail/send                            controllers.MailCtrl.send
#PUT           /mail/recv                            controllers.MailCtrl.recv

#captcha
GET           /captcha/new                          controllers.Captcha.getCaptcha
#GET           /captcha/text                          controllers.Captcha.getCaptchaText

#error
GET           /blog/error/:code                     controllers.Application.error40x(code:Int)

#############
# Test APIs #
#############

